// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Prospect prospect
//
// swagger:model Prospect
type Prospect struct {
	CreateProspect

	// address
	Address string `json:"address,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// id
	ID float64 `json:"id,omitempty"`

	// last contacted
	LastContacted string `json:"last_contacted,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// last replied
	LastReplied string `json:"last_replied,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// snipet1
	Snipet1 string `json:"snipet1,omitempty"`

	// snipet2
	Snipet2 string `json:"snipet2,omitempty"`

	// snipet3
	Snipet3 string `json:"snipet3,omitempty"`

	// snipet4
	Snipet4 string `json:"snipet4,omitempty"`

	// status
	// Enum: [ACTIVE BLACKLIST AUTOREPLIED TO-CHECK TO-REVIEW BOUNCED INVALID REPLIED]
	Status string `json:"status,omitempty"`

	// tags
	Tags string `json:"tags,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// updated
	Updated string `json:"updated,omitempty"`

	// website
	Website string `json:"website,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Prospect) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CreateProspect
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CreateProspect = aO0

	// AO1
	var dataAO1 struct {
		Address string `json:"address,omitempty"`

		City string `json:"city,omitempty"`

		Company string `json:"company,omitempty"`

		Country string `json:"country,omitempty"`

		Email string `json:"email,omitempty"`

		FirstName string `json:"first_name,omitempty"`

		ID float64 `json:"id,omitempty"`

		LastContacted string `json:"last_contacted,omitempty"`

		LastName string `json:"last_name,omitempty"`

		LastReplied string `json:"last_replied,omitempty"`

		Phone string `json:"phone,omitempty"`

		Snipet1 string `json:"snipet1,omitempty"`

		Snipet2 string `json:"snipet2,omitempty"`

		Snipet3 string `json:"snipet3,omitempty"`

		Snipet4 string `json:"snipet4,omitempty"`

		Status string `json:"status,omitempty"`

		Tags string `json:"tags,omitempty"`

		Title string `json:"title,omitempty"`

		Updated string `json:"updated,omitempty"`

		Website string `json:"website,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Address = dataAO1.Address

	m.City = dataAO1.City

	m.Company = dataAO1.Company

	m.Country = dataAO1.Country

	m.Email = dataAO1.Email

	m.FirstName = dataAO1.FirstName

	m.ID = dataAO1.ID

	m.LastContacted = dataAO1.LastContacted

	m.LastName = dataAO1.LastName

	m.LastReplied = dataAO1.LastReplied

	m.Phone = dataAO1.Phone

	m.Snipet1 = dataAO1.Snipet1

	m.Snipet2 = dataAO1.Snipet2

	m.Snipet3 = dataAO1.Snipet3

	m.Snipet4 = dataAO1.Snipet4

	m.Status = dataAO1.Status

	m.Tags = dataAO1.Tags

	m.Title = dataAO1.Title

	m.Updated = dataAO1.Updated

	m.Website = dataAO1.Website

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Prospect) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CreateProspect)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Address string `json:"address,omitempty"`

		City string `json:"city,omitempty"`

		Company string `json:"company,omitempty"`

		Country string `json:"country,omitempty"`

		Email string `json:"email,omitempty"`

		FirstName string `json:"first_name,omitempty"`

		ID float64 `json:"id,omitempty"`

		LastContacted string `json:"last_contacted,omitempty"`

		LastName string `json:"last_name,omitempty"`

		LastReplied string `json:"last_replied,omitempty"`

		Phone string `json:"phone,omitempty"`

		Snipet1 string `json:"snipet1,omitempty"`

		Snipet2 string `json:"snipet2,omitempty"`

		Snipet3 string `json:"snipet3,omitempty"`

		Snipet4 string `json:"snipet4,omitempty"`

		Status string `json:"status,omitempty"`

		Tags string `json:"tags,omitempty"`

		Title string `json:"title,omitempty"`

		Updated string `json:"updated,omitempty"`

		Website string `json:"website,omitempty"`
	}

	dataAO1.Address = m.Address

	dataAO1.City = m.City

	dataAO1.Company = m.Company

	dataAO1.Country = m.Country

	dataAO1.Email = m.Email

	dataAO1.FirstName = m.FirstName

	dataAO1.ID = m.ID

	dataAO1.LastContacted = m.LastContacted

	dataAO1.LastName = m.LastName

	dataAO1.LastReplied = m.LastReplied

	dataAO1.Phone = m.Phone

	dataAO1.Snipet1 = m.Snipet1

	dataAO1.Snipet2 = m.Snipet2

	dataAO1.Snipet3 = m.Snipet3

	dataAO1.Snipet4 = m.Snipet4

	dataAO1.Status = m.Status

	dataAO1.Tags = m.Tags

	dataAO1.Title = m.Title

	dataAO1.Updated = m.Updated

	dataAO1.Website = m.Website

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this prospect
func (m *Prospect) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CreateProspect
	if err := m.CreateProspect.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var prospectTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","BLACKLIST","AUTOREPLIED","TO-CHECK","TO-REVIEW","BOUNCED","INVALID","REPLIED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		prospectTypeStatusPropEnum = append(prospectTypeStatusPropEnum, v)
	}
}

// property enum
func (m *Prospect) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, prospectTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Prospect) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this prospect based on the context it is used
func (m *Prospect) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CreateProspect
	if err := m.CreateProspect.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Prospect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Prospect) UnmarshalBinary(b []byte) error {
	var res Prospect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
