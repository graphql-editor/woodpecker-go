// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateProspect create prospect
//
// swagger:model CreateProspect
type CreateProspect struct {

	// campaign
	Campaign *CreateProspectCampaign `json:"campaign,omitempty"`

	// prospects
	Prospects []*CreateProspectProspectsItems0 `json:"prospects"`

	// update
	Update string `json:"update,omitempty"`
}

// Validate validates this create prospect
func (m *CreateProspect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaign(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProspects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProspect) validateCampaign(formats strfmt.Registry) error {
	if swag.IsZero(m.Campaign) { // not required
		return nil
	}

	if m.Campaign != nil {
		if err := m.Campaign.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("campaign")
			}
			return err
		}
	}

	return nil
}

func (m *CreateProspect) validateProspects(formats strfmt.Registry) error {
	if swag.IsZero(m.Prospects) { // not required
		return nil
	}

	for i := 0; i < len(m.Prospects); i++ {
		if swag.IsZero(m.Prospects[i]) { // not required
			continue
		}

		if m.Prospects[i] != nil {
			if err := m.Prospects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prospects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("prospects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create prospect based on the context it is used
func (m *CreateProspect) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCampaign(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProspects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateProspect) contextValidateCampaign(ctx context.Context, formats strfmt.Registry) error {

	if m.Campaign != nil {
		if err := m.Campaign.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("campaign")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("campaign")
			}
			return err
		}
	}

	return nil
}

func (m *CreateProspect) contextValidateProspects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Prospects); i++ {

		if m.Prospects[i] != nil {
			if err := m.Prospects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prospects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("prospects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateProspect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProspect) UnmarshalBinary(b []byte) error {
	var res CreateProspect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateProspectCampaign create prospect campaign
//
// swagger:model CreateProspectCampaign
type CreateProspectCampaign struct {

	// campaign id
	CampaignID int32 `json:"campaign_id,omitempty"`
}

// Validate validates this create prospect campaign
func (m *CreateProspectCampaign) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create prospect campaign based on context it is used
func (m *CreateProspectCampaign) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateProspectCampaign) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProspectCampaign) UnmarshalBinary(b []byte) error {
	var res CreateProspectCampaign
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CreateProspectProspectsItems0 create prospect prospects items0
//
// swagger:model CreateProspectProspectsItems0
type CreateProspectProspectsItems0 struct {

	// address
	Address string `json:"address,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// id
	ID float64 `json:"id,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// snipet1
	Snipet1 string `json:"snipet1,omitempty"`

	// snipet2
	Snipet2 string `json:"snipet2,omitempty"`

	// snipet3
	Snipet3 string `json:"snipet3,omitempty"`

	// snipet4
	Snipet4 string `json:"snipet4,omitempty"`

	// status
	// Enum: [ACTIVE BLACKLIST AUTOREPLIED TO-CHECK TO-REVIEW BOUNCED INVALID REPLIED]
	Status string `json:"status,omitempty"`

	// tags
	Tags string `json:"tags,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// website
	Website string `json:"website,omitempty"`
}

// Validate validates this create prospect prospects items0
func (m *CreateProspectProspectsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createProspectProspectsItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","BLACKLIST","AUTOREPLIED","TO-CHECK","TO-REVIEW","BOUNCED","INVALID","REPLIED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createProspectProspectsItems0TypeStatusPropEnum = append(createProspectProspectsItems0TypeStatusPropEnum, v)
	}
}

const (

	// CreateProspectProspectsItems0StatusACTIVE captures enum value "ACTIVE"
	CreateProspectProspectsItems0StatusACTIVE string = "ACTIVE"

	// CreateProspectProspectsItems0StatusBLACKLIST captures enum value "BLACKLIST"
	CreateProspectProspectsItems0StatusBLACKLIST string = "BLACKLIST"

	// CreateProspectProspectsItems0StatusAUTOREPLIED captures enum value "AUTOREPLIED"
	CreateProspectProspectsItems0StatusAUTOREPLIED string = "AUTOREPLIED"

	// CreateProspectProspectsItems0StatusTODashCHECK captures enum value "TO-CHECK"
	CreateProspectProspectsItems0StatusTODashCHECK string = "TO-CHECK"

	// CreateProspectProspectsItems0StatusTODashREVIEW captures enum value "TO-REVIEW"
	CreateProspectProspectsItems0StatusTODashREVIEW string = "TO-REVIEW"

	// CreateProspectProspectsItems0StatusBOUNCED captures enum value "BOUNCED"
	CreateProspectProspectsItems0StatusBOUNCED string = "BOUNCED"

	// CreateProspectProspectsItems0StatusINVALID captures enum value "INVALID"
	CreateProspectProspectsItems0StatusINVALID string = "INVALID"

	// CreateProspectProspectsItems0StatusREPLIED captures enum value "REPLIED"
	CreateProspectProspectsItems0StatusREPLIED string = "REPLIED"
)

// prop value enum
func (m *CreateProspectProspectsItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createProspectProspectsItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateProspectProspectsItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create prospect prospects items0 based on context it is used
func (m *CreateProspectProspectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateProspectProspectsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateProspectProspectsItems0) UnmarshalBinary(b []byte) error {
	var res CreateProspectProspectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
