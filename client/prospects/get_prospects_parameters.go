// Code generated by go-swagger; DO NOT EDIT.

package prospects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProspectsParams creates a new GetProspectsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProspectsParams() *GetProspectsParams {
	return &GetProspectsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProspectsParamsWithTimeout creates a new GetProspectsParams object
// with the ability to set a timeout on a request.
func NewGetProspectsParamsWithTimeout(timeout time.Duration) *GetProspectsParams {
	return &GetProspectsParams{
		timeout: timeout,
	}
}

// NewGetProspectsParamsWithContext creates a new GetProspectsParams object
// with the ability to set a context for a request.
func NewGetProspectsParamsWithContext(ctx context.Context) *GetProspectsParams {
	return &GetProspectsParams{
		Context: ctx,
	}
}

// NewGetProspectsParamsWithHTTPClient creates a new GetProspectsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProspectsParamsWithHTTPClient(client *http.Client) *GetProspectsParams {
	return &GetProspectsParams{
		HTTPClient: client,
	}
}

/* GetProspectsParams contains all the parameters to send to the API endpoint
   for the get prospects operation.

   Typically these are written to a http.Request.
*/
type GetProspectsParams struct {

	/* Activity.

	   Prospect's activity
	*/
	Activity *string

	/* Address.

	   Prospect's physical address of the prospect
	*/
	Address *string

	/* CampaignsID.

	   Campaign ID
	*/
	CampaignsID []int32

	/* City.

	   Prospect's city
	*/
	City *string

	/* Company.

	   Prospect's company
	*/
	Company *string

	/* Contacted.

	   Whether a Prospect has been contacted or not
	*/
	Contacted *string

	/* Country.

	   Prospect's country
	*/
	Country *string

	/* Diff.

	   Request to see the data that have been changed since any specific date
	*/
	Diff *string

	/* Email.

	   Prospect's email address
	*/
	Email *string

	/* FirstName.

	   Prospect's first name
	*/
	FirstName *string

	/* Industry.

	   Prospect's industry of the company
	*/
	Industry *string

	/* Interested.

	   Prospect's interested
	*/
	Interested *string

	/* Page.

	   Page number

	   Format: integer
	*/
	Page *float64

	/* PerPage.

	   Per Page results

	   Format: int32
	   Default: 100
	*/
	PerPage *int32

	/* Search.

	   Search string
	*/
	Search *string

	/* SecondName.

	   Prospect's second name
	*/
	SecondName *string

	/* Snippet1.

	   Prospect's custom snippets of the prospect
	*/
	Snippet1 *string

	/* Snippet2.

	   Prospect's custom snippets of the prospect
	*/
	Snippet2 *string

	/* Snippet3.

	   Prospect's custom snippets of the prospect
	*/
	Snippet3 *string

	/* Snippet4.

	   Prospect's custom snippets of the prospect
	*/
	Snippet4 *string

	/* Sort.

	   Sorting field
	*/
	Sort *string

	/* State.

	   Prospect's state
	*/
	State *string

	/* Status.

	   Prospect's status
	*/
	Status *string

	/* Tags.

	   Prospect's tags
	*/
	Tags *string

	/* Title.

	   Prospect's title
	*/
	Title *string

	/* Website.

	   Prospect's website address
	*/
	Website *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get prospects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProspectsParams) WithDefaults() *GetProspectsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get prospects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProspectsParams) SetDefaults() {
	var (
		perPageDefault = int32(100)
	)

	val := GetProspectsParams{
		PerPage: &perPageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get prospects params
func (o *GetProspectsParams) WithTimeout(timeout time.Duration) *GetProspectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get prospects params
func (o *GetProspectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get prospects params
func (o *GetProspectsParams) WithContext(ctx context.Context) *GetProspectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get prospects params
func (o *GetProspectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get prospects params
func (o *GetProspectsParams) WithHTTPClient(client *http.Client) *GetProspectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get prospects params
func (o *GetProspectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActivity adds the activity to the get prospects params
func (o *GetProspectsParams) WithActivity(activity *string) *GetProspectsParams {
	o.SetActivity(activity)
	return o
}

// SetActivity adds the activity to the get prospects params
func (o *GetProspectsParams) SetActivity(activity *string) {
	o.Activity = activity
}

// WithAddress adds the address to the get prospects params
func (o *GetProspectsParams) WithAddress(address *string) *GetProspectsParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the get prospects params
func (o *GetProspectsParams) SetAddress(address *string) {
	o.Address = address
}

// WithCampaignsID adds the campaignsID to the get prospects params
func (o *GetProspectsParams) WithCampaignsID(campaignsID []int32) *GetProspectsParams {
	o.SetCampaignsID(campaignsID)
	return o
}

// SetCampaignsID adds the campaignsId to the get prospects params
func (o *GetProspectsParams) SetCampaignsID(campaignsID []int32) {
	o.CampaignsID = campaignsID
}

// WithCity adds the city to the get prospects params
func (o *GetProspectsParams) WithCity(city *string) *GetProspectsParams {
	o.SetCity(city)
	return o
}

// SetCity adds the city to the get prospects params
func (o *GetProspectsParams) SetCity(city *string) {
	o.City = city
}

// WithCompany adds the company to the get prospects params
func (o *GetProspectsParams) WithCompany(company *string) *GetProspectsParams {
	o.SetCompany(company)
	return o
}

// SetCompany adds the company to the get prospects params
func (o *GetProspectsParams) SetCompany(company *string) {
	o.Company = company
}

// WithContacted adds the contacted to the get prospects params
func (o *GetProspectsParams) WithContacted(contacted *string) *GetProspectsParams {
	o.SetContacted(contacted)
	return o
}

// SetContacted adds the contacted to the get prospects params
func (o *GetProspectsParams) SetContacted(contacted *string) {
	o.Contacted = contacted
}

// WithCountry adds the country to the get prospects params
func (o *GetProspectsParams) WithCountry(country *string) *GetProspectsParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the get prospects params
func (o *GetProspectsParams) SetCountry(country *string) {
	o.Country = country
}

// WithDiff adds the diff to the get prospects params
func (o *GetProspectsParams) WithDiff(diff *string) *GetProspectsParams {
	o.SetDiff(diff)
	return o
}

// SetDiff adds the diff to the get prospects params
func (o *GetProspectsParams) SetDiff(diff *string) {
	o.Diff = diff
}

// WithEmail adds the email to the get prospects params
func (o *GetProspectsParams) WithEmail(email *string) *GetProspectsParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the get prospects params
func (o *GetProspectsParams) SetEmail(email *string) {
	o.Email = email
}

// WithFirstName adds the firstName to the get prospects params
func (o *GetProspectsParams) WithFirstName(firstName *string) *GetProspectsParams {
	o.SetFirstName(firstName)
	return o
}

// SetFirstName adds the firstName to the get prospects params
func (o *GetProspectsParams) SetFirstName(firstName *string) {
	o.FirstName = firstName
}

// WithIndustry adds the industry to the get prospects params
func (o *GetProspectsParams) WithIndustry(industry *string) *GetProspectsParams {
	o.SetIndustry(industry)
	return o
}

// SetIndustry adds the industry to the get prospects params
func (o *GetProspectsParams) SetIndustry(industry *string) {
	o.Industry = industry
}

// WithInterested adds the interested to the get prospects params
func (o *GetProspectsParams) WithInterested(interested *string) *GetProspectsParams {
	o.SetInterested(interested)
	return o
}

// SetInterested adds the interested to the get prospects params
func (o *GetProspectsParams) SetInterested(interested *string) {
	o.Interested = interested
}

// WithPage adds the page to the get prospects params
func (o *GetProspectsParams) WithPage(page *float64) *GetProspectsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get prospects params
func (o *GetProspectsParams) SetPage(page *float64) {
	o.Page = page
}

// WithPerPage adds the perPage to the get prospects params
func (o *GetProspectsParams) WithPerPage(perPage *int32) *GetProspectsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get prospects params
func (o *GetProspectsParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithSearch adds the search to the get prospects params
func (o *GetProspectsParams) WithSearch(search *string) *GetProspectsParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get prospects params
func (o *GetProspectsParams) SetSearch(search *string) {
	o.Search = search
}

// WithSecondName adds the secondName to the get prospects params
func (o *GetProspectsParams) WithSecondName(secondName *string) *GetProspectsParams {
	o.SetSecondName(secondName)
	return o
}

// SetSecondName adds the secondName to the get prospects params
func (o *GetProspectsParams) SetSecondName(secondName *string) {
	o.SecondName = secondName
}

// WithSnippet1 adds the snippet1 to the get prospects params
func (o *GetProspectsParams) WithSnippet1(snippet1 *string) *GetProspectsParams {
	o.SetSnippet1(snippet1)
	return o
}

// SetSnippet1 adds the snippet1 to the get prospects params
func (o *GetProspectsParams) SetSnippet1(snippet1 *string) {
	o.Snippet1 = snippet1
}

// WithSnippet2 adds the snippet2 to the get prospects params
func (o *GetProspectsParams) WithSnippet2(snippet2 *string) *GetProspectsParams {
	o.SetSnippet2(snippet2)
	return o
}

// SetSnippet2 adds the snippet2 to the get prospects params
func (o *GetProspectsParams) SetSnippet2(snippet2 *string) {
	o.Snippet2 = snippet2
}

// WithSnippet3 adds the snippet3 to the get prospects params
func (o *GetProspectsParams) WithSnippet3(snippet3 *string) *GetProspectsParams {
	o.SetSnippet3(snippet3)
	return o
}

// SetSnippet3 adds the snippet3 to the get prospects params
func (o *GetProspectsParams) SetSnippet3(snippet3 *string) {
	o.Snippet3 = snippet3
}

// WithSnippet4 adds the snippet4 to the get prospects params
func (o *GetProspectsParams) WithSnippet4(snippet4 *string) *GetProspectsParams {
	o.SetSnippet4(snippet4)
	return o
}

// SetSnippet4 adds the snippet4 to the get prospects params
func (o *GetProspectsParams) SetSnippet4(snippet4 *string) {
	o.Snippet4 = snippet4
}

// WithSort adds the sort to the get prospects params
func (o *GetProspectsParams) WithSort(sort *string) *GetProspectsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get prospects params
func (o *GetProspectsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithState adds the state to the get prospects params
func (o *GetProspectsParams) WithState(state *string) *GetProspectsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get prospects params
func (o *GetProspectsParams) SetState(state *string) {
	o.State = state
}

// WithStatus adds the status to the get prospects params
func (o *GetProspectsParams) WithStatus(status *string) *GetProspectsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get prospects params
func (o *GetProspectsParams) SetStatus(status *string) {
	o.Status = status
}

// WithTags adds the tags to the get prospects params
func (o *GetProspectsParams) WithTags(tags *string) *GetProspectsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get prospects params
func (o *GetProspectsParams) SetTags(tags *string) {
	o.Tags = tags
}

// WithTitle adds the title to the get prospects params
func (o *GetProspectsParams) WithTitle(title *string) *GetProspectsParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the get prospects params
func (o *GetProspectsParams) SetTitle(title *string) {
	o.Title = title
}

// WithWebsite adds the website to the get prospects params
func (o *GetProspectsParams) WithWebsite(website *string) *GetProspectsParams {
	o.SetWebsite(website)
	return o
}

// SetWebsite adds the website to the get prospects params
func (o *GetProspectsParams) SetWebsite(website *string) {
	o.Website = website
}

// WriteToRequest writes these params to a swagger request
func (o *GetProspectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Activity != nil {

		// query param activity
		var qrActivity string

		if o.Activity != nil {
			qrActivity = *o.Activity
		}
		qActivity := qrActivity
		if qActivity != "" {

			if err := r.SetQueryParam("activity", qActivity); err != nil {
				return err
			}
		}
	}

	if o.Address != nil {

		// query param address
		var qrAddress string

		if o.Address != nil {
			qrAddress = *o.Address
		}
		qAddress := qrAddress
		if qAddress != "" {

			if err := r.SetQueryParam("address", qAddress); err != nil {
				return err
			}
		}
	}

	if o.CampaignsID != nil {

		// binding items for campaigns_id
		joinedCampaignsID := o.bindParamCampaignsID(reg)

		// query array param campaigns_id
		if err := r.SetQueryParam("campaigns_id", joinedCampaignsID...); err != nil {
			return err
		}
	}

	if o.City != nil {

		// query param city
		var qrCity string

		if o.City != nil {
			qrCity = *o.City
		}
		qCity := qrCity
		if qCity != "" {

			if err := r.SetQueryParam("city", qCity); err != nil {
				return err
			}
		}
	}

	if o.Company != nil {

		// query param company
		var qrCompany string

		if o.Company != nil {
			qrCompany = *o.Company
		}
		qCompany := qrCompany
		if qCompany != "" {

			if err := r.SetQueryParam("company", qCompany); err != nil {
				return err
			}
		}
	}

	if o.Contacted != nil {

		// query param contacted
		var qrContacted string

		if o.Contacted != nil {
			qrContacted = *o.Contacted
		}
		qContacted := qrContacted
		if qContacted != "" {

			if err := r.SetQueryParam("contacted", qContacted); err != nil {
				return err
			}
		}
	}

	if o.Country != nil {

		// query param country
		var qrCountry string

		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {

			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}
	}

	if o.Diff != nil {

		// query param diff
		var qrDiff string

		if o.Diff != nil {
			qrDiff = *o.Diff
		}
		qDiff := qrDiff
		if qDiff != "" {

			if err := r.SetQueryParam("diff", qDiff); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.FirstName != nil {

		// query param first_name
		var qrFirstName string

		if o.FirstName != nil {
			qrFirstName = *o.FirstName
		}
		qFirstName := qrFirstName
		if qFirstName != "" {

			if err := r.SetQueryParam("first_name", qFirstName); err != nil {
				return err
			}
		}
	}

	if o.Industry != nil {

		// query param industry
		var qrIndustry string

		if o.Industry != nil {
			qrIndustry = *o.Industry
		}
		qIndustry := qrIndustry
		if qIndustry != "" {

			if err := r.SetQueryParam("industry", qIndustry); err != nil {
				return err
			}
		}
	}

	if o.Interested != nil {

		// query param interested
		var qrInterested string

		if o.Interested != nil {
			qrInterested = *o.Interested
		}
		qInterested := qrInterested
		if qInterested != "" {

			if err := r.SetQueryParam("interested", qInterested); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage float64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatFloat64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Search != nil {

		// query param search
		var qrSearch string

		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {

			if err := r.SetQueryParam("search", qSearch); err != nil {
				return err
			}
		}
	}

	if o.SecondName != nil {

		// query param second_name
		var qrSecondName string

		if o.SecondName != nil {
			qrSecondName = *o.SecondName
		}
		qSecondName := qrSecondName
		if qSecondName != "" {

			if err := r.SetQueryParam("second_name", qSecondName); err != nil {
				return err
			}
		}
	}

	if o.Snippet1 != nil {

		// query param snippet1
		var qrSnippet1 string

		if o.Snippet1 != nil {
			qrSnippet1 = *o.Snippet1
		}
		qSnippet1 := qrSnippet1
		if qSnippet1 != "" {

			if err := r.SetQueryParam("snippet1", qSnippet1); err != nil {
				return err
			}
		}
	}

	if o.Snippet2 != nil {

		// query param snippet2
		var qrSnippet2 string

		if o.Snippet2 != nil {
			qrSnippet2 = *o.Snippet2
		}
		qSnippet2 := qrSnippet2
		if qSnippet2 != "" {

			if err := r.SetQueryParam("snippet2", qSnippet2); err != nil {
				return err
			}
		}
	}

	if o.Snippet3 != nil {

		// query param snippet3
		var qrSnippet3 string

		if o.Snippet3 != nil {
			qrSnippet3 = *o.Snippet3
		}
		qSnippet3 := qrSnippet3
		if qSnippet3 != "" {

			if err := r.SetQueryParam("snippet3", qSnippet3); err != nil {
				return err
			}
		}
	}

	if o.Snippet4 != nil {

		// query param snippet4
		var qrSnippet4 string

		if o.Snippet4 != nil {
			qrSnippet4 = *o.Snippet4
		}
		qSnippet4 := qrSnippet4
		if qSnippet4 != "" {

			if err := r.SetQueryParam("snippet4", qSnippet4); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// query param tags
		var qrTags string

		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {

			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}
	}

	if o.Title != nil {

		// query param title
		var qrTitle string

		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {

			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}
	}

	if o.Website != nil {

		// query param website
		var qrWebsite string

		if o.Website != nil {
			qrWebsite = *o.Website
		}
		qWebsite := qrWebsite
		if qWebsite != "" {

			if err := r.SetQueryParam("website", qWebsite); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetProspects binds the parameter campaigns_id
func (o *GetProspectsParams) bindParamCampaignsID(formats strfmt.Registry) []string {
	campaignsIDIR := o.CampaignsID

	var campaignsIDIC []string
	for _, campaignsIDIIR := range campaignsIDIR { // explode []int32

		campaignsIDIIV := swag.FormatInt32(campaignsIDIIR) // int32 as string
		campaignsIDIC = append(campaignsIDIC, campaignsIDIIV)
	}

	// items.CollectionFormat: ""
	campaignsIDIS := swag.JoinByFormat(campaignsIDIC, "")

	return campaignsIDIS
}
